<?php

namespace ContainerRunraoK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAdapterAutoPartsWarehouseCounterpartyService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Counterparty\InfrastructureCounterparty\ApiCounterparty\AdapterAutoPartsWarehouse\AdapterAutoPartsWarehouseCounterparty' shared autowired service.
     *
     * @return \App\Counterparty\InfrastructureCounterparty\ApiCounterparty\AdapterAutoPartsWarehouse\AdapterAutoPartsWarehouseCounterparty
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Counterparty/InfrastructureCounterparty/ApiCounterparty/AdapterAutoPartsWarehouse/AdapterAutoPartsWarehouseCounterpartyInterface.php';
        include_once \dirname(__DIR__, 4).'/src/Counterparty/InfrastructureCounterparty/ApiCounterparty/AdapterAutoPartsWarehouse/AdapterAutoPartsWarehouseCounterparty.php';
        include_once \dirname(__DIR__, 4).'/src/Counterparty/ApplicationCounterparty/QueryCounterparty/SearchCounterpartyQuery/FindOneByCounterpartyQueryHandler.php';
        include_once \dirname(__DIR__, 4).'/src/Counterparty/ApplicationCounterparty/QueryCounterparty/SearchCounterpartyQuery/FindAllCounterpartyQueryHandler.php';

        $a = ($container->privates['App\\Counterparty\\InfrastructureCounterparty\\RepositoryCounterparty\\CounterpartyRepository'] ?? $container->load('getCounterpartyRepositoryService'));

        return $container->privates['App\\Counterparty\\InfrastructureCounterparty\\ApiCounterparty\\AdapterAutoPartsWarehouse\\AdapterAutoPartsWarehouseCounterparty'] = new \App\Counterparty\InfrastructureCounterparty\ApiCounterparty\AdapterAutoPartsWarehouse\AdapterAutoPartsWarehouseCounterparty(new \App\Counterparty\ApplicationCounterparty\QueryCounterparty\SearchCounterpartyQuery\FindOneByCounterpartyQueryHandler($a), new \App\Counterparty\ApplicationCounterparty\QueryCounterparty\SearchCounterpartyQuery\FindAllCounterpartyQueryHandler($a));
    }
}
